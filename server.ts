import express, { Request, Response, RequestHandler } from "express";
import http from "http";
import WebSocket, { WebSocketServer } from "ws";
import TelegramBot from "node-telegram-bot-api";
import cors from "cors";
import { v4 as uuidv4 } from "uuid";
import fetch from "node-fetch"; // npm i node-fetch@2, —á—Ç–æ–±—ã —Å–∫–∞—á–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏–∑ Telegram
import dotenv from "dotenv";
import path from "path";
dotenv.config();

// --------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---------------
const token = process.env.TELEGRAM_BOT_TOKEN;
const adminChatId = process.env.TELEGRAM_ADMIN_CHAT_ID;
const isProduction = process.env.NODE_ENV === "production";
const productionDomain = process.env.PRODUCTION_DOMAIN;
const cloudflareFrontendUrl = process.env.CLOUDFLARE_FRONTEND_URL;
const cloudflareBackendUrl = process.env.CLOUDFLARE_BACKEND_URL;

if (!token || !adminChatId) {
  console.error(
    "–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_ADMIN_CHAT_ID –≤ .env"
  );
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });
const app = express();

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!isProduction) {
  const allowedOrigins = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    cloudflareFrontendUrl
  ].filter((origin): origin is string => Boolean(origin));

  console.log("–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ origins –¥–ª—è CORS:", allowedOrigins);

  app.use(
    cors({
      origin: allowedOrigins,
      methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
      allowedHeaders: ["Content-Type", "Authorization"],
      credentials: true,
    })
  );
} else if (productionDomain) {
  app.use(
    cors({
      origin: productionDomain,
      methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
      allowedHeaders: ["Content-Type", "Authorization"],
      credentials: true,
    })
  );
}

app.use(express.json());

// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ—Ç–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
if (isProduction) {
  const clientDistPath = path.resolve(__dirname, "dist");
  app.use(express.static(clientDistPath));
}

const server = http.createServer(app);

const PING_INTERVAL = 30000; // 30 —Å–µ–∫—É–Ω–¥
// -----------------------------------------------

// --------------- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ---------------
interface Message {
  id: string;
  text: string;
  type: "text" | "photo" | "file";
  fileId?: string;
  timestamp: number;
  isRead: boolean;
  fromUser: boolean; // true = –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, false = –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
}

/*
 –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∞—Ç—å ¬´—Ñ–æ—Ç–æ¬ª –æ—Ç ¬´–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞¬ª –ø—Ä–∏ –æ—Ç–¥–∞—á–µ,
 –Ω–∞–º –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ Buffer, –Ω–æ –∏ –∏–º—è+MIME.
*/
interface StoredFile {
  buffer: Buffer;
  mime: string;
  filename: string;
}

interface UserData {
  id: string;
  name: string;
  topic: string;
  messages: Message[]; // –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è (–≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ/—Ñ–∞–π–ª—ã)
  pendingAdminMessages: Message[]; // –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ñ—Ñ–ª–∞–π–Ω
  files: Map<string, StoredFile>; // –∫–ª—é—á ‚Äî internal fileId, –∑–Ω–∞—á–µ–Ω–∏–µ = buffer+mime+filename
}

interface ClientState {
  ws: WebSocket;
  isAlive: boolean;
  lastPing: number;
  userId: string;
  lastMessageTimestamp: number;
  disconnectTimeout?: NodeJS.Timeout;
}

const usersStorage = new Map<string, UserData>();
const messageToUserMap = new Map<number, string>(); // mapping Telegram-message_id ‚Üí userId
const clients = new Map<string, ClientState>();
// -------------------------------------------------------

// --------------- WebSocket-—Å–µ—Ä–≤–µ—Ä ---------------
const wss = new WebSocketServer({
  server,
  path: "/ws",
  clientTracking: true,
  perMessageDeflate: {
    zlibDeflateOptions: {
      chunkSize: 1024,
      memLevel: 7,
      level: 3,
    },
    zlibInflateOptions: {
      chunkSize: 10 * 1024,
    },
    clientNoContextTakeover: true,
    serverNoContextTakeover: true,
    serverMaxWindowBits: 10,
    concurrencyLimit: 10,
    threshold: 1024,
  },
  verifyClient: (info, callback) => {
    const origin = info.origin || info.req.headers.origin;
    console.log("WebSocket connection attempt from origin:", origin);

    if (!isProduction) {
      const allowedOrigins = [
        "http://localhost:5173",
        "http://127.0.0.1:5173",
        cloudflareFrontendUrl
      ].filter((origin): origin is string => Boolean(origin));

      console.log("Allowed WebSocket origins:", allowedOrigins);

      if (origin && allowedOrigins.includes(origin)) {
        callback(true);
      } else {
        console.log("WebSocket connection rejected from origin:", origin);
        callback(false, 403, "Forbidden");
      }
    } else if (productionDomain && origin === productionDomain) {
      callback(true);
    } else {
      console.log("WebSocket connection rejected from origin:", origin);
      callback(false, 403, "Forbidden");
    }
  },
});

const serverStartTimestamp = Date.now();

// –≠–Ω–¥–ø–æ–∏–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ¬´–º–µ—Ç–∫—É¬ª —Å—Ç–∞—Ä—Ç–∞
app.get("/server-start", (_req: Request, res: Response) => {
  res.json({ serverStart: serverStartTimestamp });
});

wss.on("connection", (ws: WebSocket, req: http.IncomingMessage) => {
  const url = new URL(req.url || "", `http://${req.headers.host}`);
  const userId = url.searchParams.get("userId") || uuidv4();

  console.log(`–ù–æ–≤—ã–π WebSocket: userId = ${userId}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ UserData –¥–ª—è —ç—Ç–æ–≥–æ userId
  const alreadyHasUserData = usersStorage.has(userId);
  // –ò—â–µ–º ¬´–∂–∏–≤–æ–µ¬ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ clients (–µ—Å–ª–∏ —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—â—ë –Ω–µ —É–¥–∞–ª–µ–Ω–æ)
  const existingClientState = clients.get(userId);

  // –ï—Å–ª–∏ –±—ã–ª–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —ç—Ç–æ–≥–æ userId, –æ—Ç–º–µ–Ω—è–µ–º –µ—ë ¬´—Ç–∞–π–º–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∏—è¬ª
  if (existingClientState?.disconnectTimeout) {
    clearTimeout(existingClientState.disconnectTimeout);
  }

  // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ ws
  if (existingClientState) {
    if (existingClientState.ws.readyState === WebSocket.OPEN) {
      existingClientState.ws.close(1000, "New connection");
    }
    clients.delete(userId);
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º UserData
  let userData = usersStorage.get(userId);
  if (!userData) {
    userData = {
      id: userId,
      name: "–ê–Ω–æ–Ω–∏–º",
      topic: "–ë–µ–∑ —Ç–µ–º—ã",
      messages: [],
      pendingAdminMessages: [],
      files: new Map<string, StoredFile>(),
    };
    usersStorage.set(userId, userData);
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
  const clientState: ClientState = {
    ws,
    isAlive: true,
    lastPing: Date.now(),
    userId,
    lastMessageTimestamp: Date.now(),
  };
  clients.set(userId, clientState);

  // 1) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é + pendingAdminMessages
  ws.send(
    JSON.stringify({
      type: "init",
      history: userData.messages,
      //pending: userData.pendingAdminMessages,
    })
  );

  // 2) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –±—ã–ª–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
  userData.pendingAdminMessages.forEach((msg) => {
    ws.send(
      JSON.stringify({
        action: "admin_message",
        contentType: msg.type,
        id: msg.id,
        text: msg.text,
        fileId: msg.fileId,
        timestamp: msg.timestamp,
        isRead: msg.isRead,
        fromUser: false,
      })
    );
    msg.isRead = true;
  });
  userData.pendingAdminMessages = [];

  // 3) –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª (–Ω–æ–≤—ã–π –∏–ª–∏ –≤–µ—Ä–Ω—É–≤—à–∏–π—Å—è)
  const greetingText = alreadyHasUserData
    ? `üü° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –≤ —á–∞—Ç. ID: ${userId}`
    : `üü¢ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —á–∞—Ç—É. ID: ${userId}`;
  bot.sendMessage(adminChatId!, greetingText).catch(console.error);

  // 4) –ü–∏–Ω–≥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–¥–∏—Ç—å ¬´–º–µ—Ä—Ç–≤—ã–µ¬ª –∫–æ–Ω–Ω–µ–∫—Ç—ã
  const pingInterval = setInterval(() => {
    if (ws.readyState === WebSocket.OPEN) {
      ws.ping();
    }
  }, PING_INTERVAL);

  ws.on("pong", () => {
    const st = clients.get(userId);
    if (st) {
      st.lastPing = Date.now();
    }
  });

  // --------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (React) ---------------
  ws.on("message", async (rawData: WebSocket.RawData) => {
    try {
      const data = JSON.parse(rawData.toString());
      const st = clients.get(userId);
      if (!st) {
        console.error(`–ù–µ—Ç clientState –¥–ª—è userId = ${userId}`);
        return;
      }
      st.lastMessageTimestamp = Date.now();
      st.isAlive = true;

      // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã (–∏–º—è + —Ç–µ–º–∞) ---
      if (data.type === "form") {
        userData!.name = data.name;
        userData!.topic = data.topic;
        ws.send(JSON.stringify({ type: "form_ack", formId: data.formId }));
        return;
      }

      // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã ---
      if (data.type === "update_topic") {
        userData!.topic = data.topic;
        bot
          .sendMessage(
            adminChatId!,
            `üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª —Ç–µ–º—É –Ω–∞: ${data.topic}\nID: ${userId}`
          )
          .catch(console.error);
        return;
      }

      // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–ø—Ä–æ—á–∏—Ç–∞–Ω–æ¬ª ---
      if (data.type === "read") {
        userData?.messages.forEach((m) => (m.isRead = true));
        return;
      }

      // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞ ---
      if (data.type === "close") {
        clients.delete(userId);
        ws.close(1000, "ClientRequestedClose");
        return;
      }

      // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´—Ñ–∞–π–ª–∞¬ª (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç) –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ---
      if (data.type === "file") {
        try {
          // 1) –¥–µ–∫–æ–¥–∏—Ä—É–µ–º base64 ‚Üí Buffer
          const fileBuffer = Buffer.from(data.data, "base64");
          const mime = data.fileType as string; // e.g. "image/png" –∏–ª–∏ "application/pdf"
          const filename = data.fileName as string; // –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è

          // 2) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ userData.files –ø–æ–¥ –∫–ª—é—á–æ–º data.fileId
          userData!.files.set(data.fileId, {
            buffer: fileBuffer,
            mime,
            filename,
          });

          // 3) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
          const caption = `üìÅ –ù–æ–≤—ã–π —Ñ–∞–π–ª\n–ò–º—è: ${userData!.name}\n–¢–µ–º–∞: ${userData!.topic}\n–§–∞–π–ª: ${filename}`;
          let sentMsg: TelegramBot.Message;

          if (mime.startsWith("image/")) {
            sentMsg = await bot.sendPhoto(adminChatId!, fileBuffer, { caption });
          } else {
            sentMsg = await bot.sendDocument(adminChatId!, fileBuffer, {
              caption,
            });
          }
          // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–≤—è–∑—å: Telegram-message_id ‚Üí userId
          messageToUserMap.set(sentMsg.message_id, userId);

          // 4) —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç Message –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
          const newMessage: Message = {
            id: data.fileId,
            text: filename,
            type: mime.startsWith("image/") ? "photo" : "file",
            fileId: data.fileId,
            timestamp: Date.now(),
            isRead: false,
            fromUser: true,
          };
          userData!.messages.push(newMessage);

          // 5) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É, —á—Ç–æ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω/–ø–µ—Ä–µ—Å–ª–∞–Ω
          ws.send(
            JSON.stringify({
              type: "file_ack",
              fileId: data.fileId,
              success: true,
            })
          );
        } catch (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ data.type='file':", err);
          ws.send(
            JSON.stringify({
              type: "file_ack",
              fileId: data.fileId,
              success: false,
            })
          );
        }
        return;
      }

      // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´text message¬ª –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ---
      if (data.type === "message") {
        // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º client.id –≤–º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ
        const newMessage: Message = {
          id: data.id,
          text: data.text,
          type: "text",
          timestamp: Date.now(),
          isRead: false,
          fromUser: true,
        };
        userData!.messages.push(newMessage);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –≤ Telegram
        const msgText = `üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n–ò–º—è: ${userData!.name}\n–¢–µ–º–∞: ${userData!.topic}\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${data.text}`;
        const sentMsg = await bot.sendMessage(adminChatId!, msgText);
        messageToUserMap.set(sentMsg.message_id, userId);
        return;
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ WebSocket-—Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }
  });

  // --- –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket ---
  ws.on("close", (code: number, reason: string) => {
    console.log(
      `WS –∑–∞–∫—Ä—ã—Ç. userId=${userId}, –∫–æ–¥=${code}, –ø—Ä–∏—á–∏–Ω–∞='${reason}'`
    );
    clearInterval(pingInterval);

    // –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º ¬´–ø–∏–Ω–≥–∏¬ª –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–∑–∞–π–¥—ë—Ç
    const disconnectTimeout = setTimeout(() => {
      if (clients.get(userId)?.ws === ws) {
        clients.delete(userId);
        bot
          .sendMessage(adminChatId!, `üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç. ID: ${userId}`)
          .catch(console.error);
      }
    }, 5000);

    clients.set(userId, {
      ws,
      isAlive: true,
      lastPing: Date.now(),
      userId,
      lastMessageTimestamp: Date.now(),
      disconnectTimeout,
    });
  });

  ws.on("error", (err) => {
    console.error(`WS error –¥–ª—è userId=${userId}:`, err);
  });
});
// ------------------------------------------------

// --------------- –û—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---------------
bot.on("message", async (msg: TelegramBot.Message) => {
  // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ reply ‚Üí –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
  if (!msg.reply_to_message) return;

  // –°–º–æ—Ç—Ä–∏–º, –ø–æ –∫–∞–∫–æ–º—É Telegram-—Å–æ–æ–±—â–µ–Ω–∏—é –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç
  const repliedTelegramId = msg.reply_to_message.message_id;
  const userId = messageToUserMap.get(repliedTelegramId);
  if (!userId) return;

  const userData = usersStorage.get(userId);
  if (!userData) return;

  const client = clients.get(userId);

  // 1) –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (msg.text, –±–µ–∑ —Ñ–æ—Ç–æ –∏ –±–µ–∑ document)
  if (msg.text && !msg.photo && !msg.document) {
    const newMessage: Message = {
      id: uuidv4(),
      text: msg.text,
      type: "text",
      timestamp: Date.now(),
      isRead: false,
      fromUser: false,
    };
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
    userData.messages.push(newMessage);

    if (client?.ws.readyState === WebSocket.OPEN) {
      client.ws.send(
        JSON.stringify({
          action: "admin_message",
          contentType: newMessage.type, // "text"
          id: newMessage.id,
          text: newMessage.text,
          timestamp: newMessage.timestamp,
          isRead: true,
          fromUser: false,
        })
      );
      newMessage.isRead = true;
    } else {
      userData.pendingAdminMessages.push(newMessage);
    }
    return;
  }

  // 2) –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ (msg.photo array)
  if (msg.photo && msg.photo.length > 0) {
    try {
      // –ë–µ—Ä—ë–º —Å–∞–º—ã–π ¬´–±–æ–ª—å—à–æ–π¬ª —Ä–∞–∑–º–µ—Ä (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)
      const largestPhoto = msg.photo[msg.photo.length - 1];
      const fileIdTelegram = largestPhoto.file_id;
      const fileLink = await bot.getFileLink(fileIdTelegram);
      const response = await fetch(fileLink);
      const arrayBuffer = await response.arrayBuffer();
      const buffer = Buffer.from(arrayBuffer);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME (Telegram –æ—Ç–¥–∞—ë—Ç –≤—Å–µ–≥–¥–∞ jpeg –¥–ª—è photo-–º–µ—Ç–æ–¥–∞)
      const mime = "image/jpeg";
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–π internal fileId
      const localFileId = uuidv4();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º buffer+mime+filename
      const filename = msg.caption || "photo_from_admin.jpg";
      userData.files.set(localFileId, {
        buffer,
        mime,
        filename,
      });

      const newMessage: Message = {
        id: localFileId,
        text: filename,
        type: "photo",
        fileId: localFileId,
        timestamp: Date.now(),
        isRead: false,
        fromUser: false,
      };
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
      userData.messages.push(newMessage);

      if (client?.ws.readyState === WebSocket.OPEN) {
        client.ws.send(
          JSON.stringify({
            action: "admin_message",
            contentType: newMessage.type, // "photo"
            id: newMessage.id,
            text: newMessage.text,
            fileId: newMessage.fileId,
            timestamp: newMessage.timestamp,
            isRead: true,
            fromUser: false,
          })
        );
        newMessage.isRead = true;
      } else {
        userData.pendingAdminMessages.push(newMessage);
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞:", err);
    }
    return;
  }

  // 3) –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–ª–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç (msg.document)
  if (msg.document) {
    try {
      const fileIdTelegram = msg.document.file_id;
      const fileLink = await bot.getFileLink(fileIdTelegram);
      const response = await fetch(fileLink);
      const arrayBuffer = await response.arrayBuffer();
      const buffer = Buffer.from(arrayBuffer);

      const mime = msg.document.mime_type || "application/octet-stream";
      const localFileId = uuidv4();
      const filename = msg.document.file_name || "file_from_admin";

      userData.files.set(localFileId, {
        buffer,
        mime,
        filename,
      });

      const newMessage: Message = {
        id: localFileId,
        text: filename,
        type: "file",
        fileId: localFileId,
        timestamp: Date.now(),
        isRead: false,
        fromUser: false,
      };
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
      userData.messages.push(newMessage);

      if (client?.ws.readyState === WebSocket.OPEN) {
        client.ws.send(
          JSON.stringify({
            action: "admin_message",
            contentType: newMessage.type, // "file"
            id: newMessage.id,
            text: newMessage.text,
            fileId: newMessage.fileId,
            timestamp: newMessage.timestamp,
            isRead: true,
            fromUser: false,
          })
        );
        newMessage.isRead = true;
      } else {
        userData.pendingAdminMessages.push(newMessage);
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞:", err);
    }
    return;
  }
});
// ------------------------------------------------------

// --------------- Endpoint –¥–ª—è –æ—Ç–¥–∞—á–∏ —Ñ–∞–π–ª–æ–≤ ---------------
const fileHandler: RequestHandler = (req, res) => {
  const fileId = req.params.id;
  // –ò—â–µ–º, —É –∫–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ñ–∞–π–ª —Å —ç—Ç–∏–º fileId
  const userData = Array.from(usersStorage.values()).find((u) =>
    u.messages.some((m) => m.fileId === fileId)
  );

  if (!userData || !userData.files.has(fileId)) {
    res.status(404).send("File not found");
    return;
  }

  // –î–æ—Å—Ç–∞—ë–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π Buffer + mime + filename
  const stored = userData.files.get(fileId)!;
  const { buffer, mime, filename } = stored;

  if (mime.startsWith("image/")) {
    // –î–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å Content-Type = —Ä–µ–∞–ª—å–Ω—ã–π MIME
    res.setHeader("Content-Type", mime);
    res.send(buffer);
  } else {
    // –î–ª—è –ø—Ä–æ—á–∏—Ö —Ñ–∞–π–ª–æ–≤ ‚Äì –æ—Ç–¥–∞—Ç—å –∫–∞–∫ ¬´—Å–∫–∞—á–∞—Ç—å¬ª
    res.setHeader("Content-Type", "application/octet-stream");
    res.setHeader("Content-Disposition", `attachment; filename="${filename}"`);
    res.send(buffer);
  }
};

app.get("/file/:id", fileHandler);
// ---------------------------------------------------------

// –ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get("/", (_req: Request, res: Response) => {
  res.send("–°–µ—Ä–≤–µ—Ä —á–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç");
});

if (isProduction) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
  app.get("*", (req: Request, res: Response) => {
    res.sendFile(path.join(__dirname, "dist", "index.html"));
  });
}

const PORT = process.env.PORT || 3001;
server.listen(PORT, () => {
  console.log(`Server listening on port ${PORT} in ${isProduction ? "production" : "development"} mode`);
});